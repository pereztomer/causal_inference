from causalgraphicalmodels import CausalGraphicalModel


def generate_graph():
    sprinkler = CausalGraphicalModel(
        nodes=["Season",
               "Player X is in the team",
               "Player X is in the game",
               'Player X complete stats',
               "Average points generated by the team",
               "Average points allowed by the team",
               "Playoff game",
               "Teams pace",
               "FG3M average",
               "FG3A average",
               "Teams offensive rating",
               "Teams defensive rating",
               "Home/Road game",
               "T - 3pt planned",
               "y - team won"],
        edges=[
            ("Season", "Player X is in the team"),
            ("Season", "Player X complete stats"),
            ("Player X is in the team", "Average points generated by the team"),
            ("Player X is in the team", "Average points allowed by the team"),
            ("Player X is in the team", "Teams pace"),
            ("Playoff game", "Player X is in the team"),
            ("Playoff game", "y - team won"),
            ("Player X complete stats", "Average points generated by the team"),
            ("Player X complete stats", "Average points allowed by the team"),
            ("Player X complete stats", "Teams pace"),
            ("Player X complete stats", "FG3M average"),
            ("Player X complete stats", "FG3A average"),
            ("FG3M average", "T - 3pt planned"),
            ("FG3A average", "T - 3pt planned"),
            ("Average points generated by the team", "Teams offensive rating"),
            ("Average points allowed by the team", "Teams defensive rating"),
            ("Teams pace", "Teams offensive rating"),
            ("Teams pace", "Teams defensive rating"),
            ("Teams offensive rating", "y - team won"),
            ("Teams defensive rating", "y - team won"),
            ("T - 3pt planned", "y - team won"),
            ("Home/Road game", "y - team won"),
            ("Player X is in the game", "T - 3pt planned")
        ]
    )

    observed_vars = ["Season",
                     "Player X is in the team",
                     'Player X complete stats',
                     "Average points generated by the team",
                     "Average points allowed by the team",
                     "Playoff game",
                     "Teams pace",
                     "FG3M average",
                     "FG3A average",
                     "Teams offensive rating",
                     "Teams defensive rating",
                     "Home/Road game"]
    # draw return a graphviz `dot` object, which jupyter can render
    print(f'Backdoor criterion:'
          f' {sprinkler.is_valid_backdoor_adjustment_set("T - 3pt planned", "y - team won", set(observed_vars))}')
    print(f'Frontdoor criterion:'
          f' {sprinkler.is_valid_frontdoor_adjustment_set("T - 3pt planned", "y - team won", set(observed_vars))}')


def main():
    generate_graph()


if __name__ == '__main__':
    main()
